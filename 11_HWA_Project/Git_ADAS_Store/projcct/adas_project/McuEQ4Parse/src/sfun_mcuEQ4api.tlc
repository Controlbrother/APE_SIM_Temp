%% file : sfun_mcuEQ4api.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for sfun_mcuEQ4api
%% 
%% Simulink version      : 10.2 (R2020b) 29-Jul-2020
%% TLC file generated on : 20-Nov-2020 15:08:04

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sfun_mcuEQ4api';
     def.OutputFcnSpec = 'void udpParse(uint8 u1[1500],uint32 u2[1], uint8 y1[1],SPI2SOC_VISIONS_BUS y2[1]);';
     def.HeaderFiles = {'mcuEQ4.h'};
     def.SourceFiles = {'mcuEQ4.c'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements sfun_mcuEQ4api "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("sfun_mcuEQ4api_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int sfun_mcuEQ4api_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth);
        extern int sfun_mcuEQ4api_wrapper_freemem(void** y2BUS);

        extern void sfun_mcuEQ4api_wrapper_Output(const uint8_T* u1, const uint32_T* u2,  uint8_T* y1,  void* y2, void* y2BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("sfun_mcuEQ4api_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "mcuEQ4.h"

        int sfun_mcuEQ4api_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth) {
            *y2BUS = calloc(sizeof(SPI2SOC_VISIONS_BUS), y2BUSWidth);
            if (*y2BUS==NULL) return -1;
            return 0;
        }
        
        int sfun_mcuEQ4api_wrapper_freemem(void** y2BUS) {
            if (*y2BUS!=NULL) free(*y2BUS);
            *y2BUS = NULL;
            return 0;
        }

        void sfun_mcuEQ4api_wrapper_Output(const uint8_T* u1, const uint32_T* u2,  uint8_T* y1,  void* y2, void* y2BUS) {
            udpParse((uint8_T*)(u1), (uint32_T*)(u2), y1, (SPI2SOC_VISIONS_BUS *) y2BUS);

            /* Assign the user structure y2BUS to the Simulink structure y2 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y2", "(*(SPI2SOC_VISIONS_BUS *)y2BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("mcuEQ4.h")>
    %endif
    %<SLibAddToStaticSources("mcuEQ4.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (sfun_mcuEQ4api_wrapper_allocmem(%<y2BUS_addr>, %<LibBlockOutputSignalWidth(1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y2BUS_ptr = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        sfun_mcuEQ4api_wrapper_Output(%<u1_ptr>, %<u2_ptr>, %<y1_ptr>, %<y2_ptr>, %<y2BUS_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %% 
        udpParse((uint8_T*)%<u1_ptr>, (uint32_T*)%<u2_ptr>, %<y1_ptr>, %<y2_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (sfun_mcuEQ4api_wrapper_freemem(%<y2BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]

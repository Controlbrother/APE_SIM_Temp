/****************************************************************************\ 
 *** 
 *** File                  : rtosal_taskap.cpp
 *** 
 *** Generated by dSPACE Tools.
 *** (c) Copyright 2013, dSPACE GmbH. All rights reserved.
\****************************************************************************/

#if !defined(RTOSAL_TASKAP_CPP_)
#  define    RTOSAL_TASKAP_CPP_


/* -- Include directives. -- */
#  include "rtosal_task.h"
#  include "IOCode_Data.h"
#  include "rtosal_taskap.h"

#  if defined(EXTERN_C_DECL)
#    undef EXTERN_C_DECL
#  endif
#  if defined(__cplusplus)
#    define EXTERN_C_DECL extern "C"
#  else
#    define EXTERN_C_DECL extern
#  endif


/* -- Declarations of extern functions. -- */

 EXTERN_C_DECL void Noa_Nofusion_DSRTCheckForSimulationStopCondition(
    void);

/* -- Definitions of exported functions. -- */

  void
RtosAlTask_06_TaskEntry(
    void) 
{

DsBusAccessRP_updateAllInputs(ErrorList);
/* CANFD5-1-1 */               
DsCanBoard_update(cANFD5_1_1_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cANFD5_1_1_CAN_BoardHandle, cANFD5_1_1_CAN_ChannelHandle);
/* CANFD-5-2-1 */               
DsCanBoard_update(cANFD_5_2_1_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cANFD_5_2_1_CAN_BoardHandle, cANFD_5_2_1_CAN_ChannelHandle);
/* CANFD5-1-2 */               
DsCanBoard_update(cANFD5_1_2_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cANFD5_1_2_CAN_BoardHandle, cANFD5_1_2_CAN_ChannelHandle);
/* CANFD5-2-2 */               
DsCanBoard_update(cANFD5_2_2_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cANFD5_2_2_CAN_BoardHandle, cANFD5_2_2_CAN_ChannelHandle);
/* CAN2 */               
DsCanBoard_update(cAN2_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cAN2_CAN_BoardHandle, cAN2_CAN_ChannelHandle);
/* CAN3 */               
DsCanBoard_update(cAN3_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cAN3_CAN_BoardHandle, cAN3_CAN_ChannelHandle);
/* CAN4 */               
DsCanBoard_update(cAN4_CAN_BoardHandle); 

DsBusAccessRP_updateChannelInputs(ErrorList, (const char*) "CAN", cAN4_CAN_BoardHandle, cAN4_CAN_ChannelHandle);

}

  void
RtosAlTask_06_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

DsBusAccessRP_updateAllOutputs(ErrorList);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cANFD5_1_1_CAN_BoardHandle, cANFD5_1_1_CAN_ChannelHandle);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cANFD_5_2_1_CAN_BoardHandle, cANFD_5_2_1_CAN_ChannelHandle);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cANFD5_1_2_CAN_BoardHandle, cANFD5_1_2_CAN_ChannelHandle);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cANFD5_2_2_CAN_BoardHandle, cANFD5_2_2_CAN_ChannelHandle);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cAN2_CAN_BoardHandle, cAN2_CAN_ChannelHandle);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cAN3_CAN_BoardHandle, cAN3_CAN_ChannelHandle);

DsBusAccessRP_updateChannelOutputs(ErrorList, (const char*) "CAN", cAN4_CAN_BoardHandle, cAN4_CAN_ChannelHandle);

    /* Update task simulation time */
    StepCounter_Periodic_Task_1++;
    RtosAlTaskSimTime_Periodic_Task_1 = StepCounter_Periodic_Task_1*0.01;

}

  void
RtosAlTask_07_TaskEntry(
    void) 
{

}

  void
RtosAlTask_07_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

  void
RtosAlTask_08_TaskEntry(
    void) 
{

}

  void
RtosAlTask_08_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

  void
RtosAl4cb87b8a_6856_4440_9e9e_4b18dd6b41e2_TaskEntry(
    void) 
{
ap_entry_RuntimeTunableParams();

}

  void
RtosAl4cb87b8a_6856_4440_9e9e_4b18dd6b41e2_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();
ap_exit_RuntimeTunableParams();

    /* Update task simulation time */
    StepCounter_Bus_Configuration++;
    RtosAlTaskSimTime_Bus_Configuration = StepCounter_Bus_Configuration*0.001;

}

  void
RtosAlCAN_RX_Task_TaskEntry(
    void) 
{

}

  void
RtosAlCAN_RX_Task_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

  void
RtosAlf308188a_1e95_44aa_bac7_cd4dc4f25032_TaskEntry(
    void) 
{

}

  void
RtosAlf308188a_1e95_44aa_bac7_cd4dc4f25032_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

    /* Update task simulation time */
    StepCounter_Bus_Configuration_1++;
    RtosAlTaskSimTime_Bus_Configuration_1 = StepCounter_Bus_Configuration_1*0.001;

}

  void
RtosAlCAN_RX_Task_TaskEntry_1(
    void) 
{

}

  void
RtosAlCAN_RX_Task_TaskExit_1(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

  void
RtosAl9ab0cc7a_7747_4e61_835a_efecbac90484_TaskEntry(
    void) 
{

}

  void
RtosAl9ab0cc7a_7747_4e61_835a_efecbac90484_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

    /* Update task simulation time */
    StepCounter_Bus_Configuration_2++;
    RtosAlTaskSimTime_Bus_Configuration_2 = StepCounter_Bus_Configuration_2*0.001;

}

  void
RtosAlCAN_RX_Task_TaskEntry_2(
    void) 
{

}

  void
RtosAlCAN_RX_Task_TaskExit_2(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

  void
RtosAl25c71bec_d48f_43ef_ad06_2e7dfd82f750_TaskEntry(
    void) 
{

}

  void
RtosAl25c71bec_d48f_43ef_ad06_2e7dfd82f750_TaskExit(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

    /* Update task simulation time */
    StepCounter_Bus_Configuration_3++;
    RtosAlTaskSimTime_Bus_Configuration_3 = StepCounter_Bus_Configuration_3*0.001;

}

  void
RtosAlCAN_RX_Task_TaskEntry_3(
    void) 
{

}

  void
RtosAlCAN_RX_Task_TaskExit_3(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

  void
RtosAlCAN_RX_Task_TaskEntry_4(
    void) 
{

}

  void
RtosAlCAN_RX_Task_TaskExit_4(
    void) 
{
Noa_Nofusion_DSRTCheckForSimulationStopCondition();

}

#endif                                 /* RTOSAL_TASKAP_CPP_ */
/* [EOF] */
